go.property("propnumber", 0)
go.property("propv3", vmath.vector3())
go.property("propv4", vmath.vector4())
go.property("propquat", vmath.quat())
go.property("propmatrix4", vmath.matrix4())
go.property("prophash", hash(""))
go.property("propbool", true)

local test = require "tests.test"

function init(self)
	assert(go.exists("go"))
	assert(go.exists("go2"))

	local p1 = go.get_position()
	local p2 = go.get_position("go2")
	go.set_position(p1)
	go.set_position(p2, "go2")

	local s1 = go.get_scale()
	local s2 = go.get_scale("go2")
	go.set_scale(s1)
	go.set_scale(s2, "go2")

	local r1 = go.get_rotation()
	local r2 = go.get_rotation("go2")
	go.set_rotation(r1)
	go.set_rotation(r2, "go2")

	assert(go.get_id() == hash("/go"))
	assert(go.get_id("go2") == hash("/go2"))

	assert(go.get_parent("parent") == nil)
	assert(go.get_parent("child") == hash("/parent"))

	go.set_scale(vmath.vector3(2, 3, 4))
	assert(go.get_scale_uniform() == 2)

	local wp1 = go.get_world_position()
	local wp2 = go.get_world_position("go2")
	local ws1 = go.get_world_scale()
	local ws2 = go.get_world_scale("go2")
	local wr1 = go.get_world_rotation()
	local wr2 = go.get_world_rotation("go2")
	local wt1 = go.get_world_transform()
	local wt2 = go.get_world_transform("go2")

	test.async(function(yield, resume)
		-- world scale
		assert(go.get_world_scale_uniform("child") == 1)
		assert(go.get_world_scale_uniform("parent") == 1)
		go.set_scale(vmath.vector3(4), "child")
		go.set_scale(vmath.vector3(2), "parent")
		test.wait()
		assert(go.get_world_scale_uniform("child") == 8)
		assert(go.get_world_scale_uniform("parent") == 2)

		-- delete game object
		go.delete("go3")
		assert(go.exists("go3"))
		test.wait()
		assert(not go.exists("go3"))

		-- set parent
		go.set_parent("go4", "parent")
		assert(go.get_parent("go4") == nil)
		test.wait()
		assert(go.get_parent("go4") == hash("/parent"))

		-- properties
		go.get("#", "propnumber")
		go.get("#", "propv3")
		go.get("#", "propv4")
		go.get("#", "propquat")
		go.get("#", "prophash")
		go.get("#", "propbool")
		go.set("#", "propnumber", 123)
		go.set("#", "propv3", vmath.vector3(0, 1, 2))
		go.set("#", "propv4", vmath.vector4(0, 1, 2, 3))
		go.set("#", "propquat", vmath.quat(0, 1, 2, 3))
		go.set("#", "prophash", hash("foo"))
		go.set("#", "propbool", false)

		test.assert_error(go.get, ".", "foobar")
		test.assert_error(go.get, "#", "foobar")
		test.assert_error(go.get, "/go", "foobar")
						
		-- animate
		local count = 0
		go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 1, 0, function() count = count + 1 end)
		go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 1, 0, function() count = count + 1 end)
		go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 1, 0, function() count = count + 1 end)
		go.animate(".", "position.z", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 1, 0, function() count = count + 1 end)
		go.animate("#", "propnumber", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 1, 0, function() count = count + 1 end)
		go.animate("#", "propv3.z",   go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 1, 0, function() count = count + 1 end)
		go.animate("#", "propv4.w",   go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 1, 0, function() count = count + 1 end)
		go.animate("#", "propquat.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 1, 0, function() count = count + 1 end)
		go.cancel_animations(".", "position.z")
		test.wait_until_true(function()
			return count == 6
		end)

		test.ok()
	end)
end
