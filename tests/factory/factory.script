local test = require "tests.test"

function init(self)
	-- check resource cap on spawn error
	local max = sys.get_config_int("sprite.max_count")
	for i=1,max do
		assert(factory.create("#shipfactory1"))
	end
	assert(not factory.create("#shipfactory1"))

	-- factory create with properties
	local id = factory.create("#properties")
	local url = msg.url(nil, id, "properties")
	local props = {}
	props.foo = 1
	props.bar = vmath.vector3()
	props.propnumber = go.get(url, "propnumber") + 1
	props.propv3 = go.get(url, "propv3") + vmath.vector3(1)
	props.propv4 = go.get(url, "propv4") + vmath.vector4(1)
	props.propquat = go.get(url, "propquat") * vmath.quat(2, 2, 2, 2)
	props.prophash = hash("foobar")
	props.propbool = not go.get(url, "propbool")

	local id = factory.create("#properties", nil, nil, props)
	local url = msg.url(nil, id, "properties")
	assert(go.get(url, "propnumber") == props.propnumber)
	assert(go.get(url, "propv3") == props.propv3)
	assert(go.get(url, "propv3") == props.propv3)
	assert(go.get(url, "propquat") == props.propquat)
	assert(go.get(url, "prophash") == props.prophash)
	assert(go.get(url, "propbool") == props.propbool)
	
	assert(factory.create("#properties"))
	assert(factory.create("#properties", vmath.vector3()))
	assert(factory.create("#properties", vmath.vector3(), vmath.quat()))
	assert(factory.create("#properties", vmath.vector3(), vmath.quat(), props))
	assert(factory.create("#properties", vmath.vector3(), vmath.quat(), props, vmath.vector3()))
	assert(factory.create("#properties", nil,             vmath.quat(), props, vmath.vector3()))
	assert(factory.create("#properties", vmath.vector3(), nil,          props, vmath.vector3()))
	assert(factory.create("#properties", vmath.vector3(), vmath.quat(), nil,   vmath.vector3()))
	assert(factory.create("#properties", vmath.vector3(), vmath.quat(), props, nil))

	assert(factory.get_status("#shipfactory1") == factory.STATUS_LOADED)
	assert(factory.get_status("#dynamicprototype") == factory.STATUS_LOADED)
	assert(factory.get_status("#loaddynamically") == factory.STATUS_UNLOADED)

	-- non dynamic prototype
	test.assert_error(factory.set_prototype, "#shipfactory2", "/tests/factory/ship2.goc")

	-- dynamic prototype
	test.assert_error(factory.set_prototype, "#dynamicprototype", "doesnotexist")
	factory.set_prototype("#dynamicprototype", "/tests/factory/ship2.goc")

	test.async(function()
		test.wait_until_done(function(done)
			factory.load("#loaddynamically", done)
			assert(factory.get_status("#loaddynamically") == factory.STATUS_LOADING)
		end)
		assert(factory.get_status("#loaddynamically") == factory.STATUS_LOADED)

		factory.unload("#loaddynamically")
		assert(factory.get_status("#loaddynamically") == factory.STATUS_UNLOADED)

		test.ok()
	end)
end
